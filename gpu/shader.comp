// Compute shader template file for the FIMD-GPU implementation.
#version 310 es

//%s layout (local_size_x = %d, local_size_y = %d, local_size_z = 1) in;

layout(rgba8ui, binding = 0) readonly uniform highp uimage2D image_in;

layout(binding = 2, offset = 0) uniform atomic_uint sun_pts_count;
layout(binding = 3, offset = 0) uniform atomic_uint markers_count;

layout(std430, binding = 4) buffer configuration_buffer { uint configuration[];};
layout(std430, binding = 5) buffer markers_buffer { uint markers[];};
layout(std430, binding = 6) buffer sun_pts_buffer { uint sun_pts[];};

uint config_threshold = 0U;
uint config_threshold_diff = 0U;
uint config_threshold_sun = 0U;
uint config_max_markers_count = 0U;
uint config_max_sun_pts_count = 0U;
uint config_radii_count = 0U;

ivec2 image_size = ivec2(-1, -1);
ivec2 center_pos = ivec2(-1, -1);
int center_val = -1;

#define FIMD_RESULT_NONE 0
#define FIMD_RESULT_MARKER 1
#define FIMD_RESULT_SUN 2

#define BRESENHAM_EMIT_PY_MX 0
#define BRESENHAM_EMIT_MY_PX 1
#define BRESENHAM_EMIT_PX_MY 2
#define BRESENHAM_EMIT_MX_PY 3
#define BRESENHAM_EMIT_PY_PX 4
#define BRESENHAM_EMIT_MY_MX 5
#define BRESENHAM_EMIT_PX_PY 6
#define BRESENHAM_EMIT_MX_MY 7
#define BRESENHAM_UPDATE_X_Y 8

int x, y, P, state;

void bresenham_circle_init(int radius)
{
    x = 0;
    y = radius;
    P = 3 - 2*radius;
    state = BRESENHAM_EMIT_PY_MX;
}

ivec2 bresenham_circle_next_pt()
{
    if (state == BRESENHAM_UPDATE_X_Y) {
        if (P < 0) {
            x += 1;
            P += 4*x + 6;
        } else {
            x += 1;
            y -= 1;
            P += 4*(x - y) + 10;
        }
        state = BRESENHAM_EMIT_PY_MX;
    }

    if (x <= y) {
        switch (state) {
            case BRESENHAM_EMIT_PY_MX:
                state = BRESENHAM_EMIT_MY_PX;
                return center_pos + ivec2(+y, -x);
            case BRESENHAM_EMIT_MY_PX:
                if (x < y) {
                    state = BRESENHAM_EMIT_PX_MY;
                } else if (x > 0) {
                    state = BRESENHAM_EMIT_PY_PX;
                } else {
                    state = BRESENHAM_UPDATE_X_Y;
                }
                return center_pos + ivec2(-y, +x);
            case BRESENHAM_EMIT_PX_MY:
                state = BRESENHAM_EMIT_MX_PY;
                return center_pos + ivec2(+x, -y);
            case BRESENHAM_EMIT_MX_PY:
                if (x > 0) {
                    state = BRESENHAM_EMIT_PY_PX;
                } else {
                    state = BRESENHAM_UPDATE_X_Y;
                }
                return center_pos + ivec2(-x, +y);
            case BRESENHAM_EMIT_PY_PX:
                state = BRESENHAM_EMIT_MY_MX;
                return center_pos + ivec2(+y, +x);
            case BRESENHAM_EMIT_MY_MX:
                if (x < y) {
                    state = BRESENHAM_EMIT_PX_PY;
                } else {
                    state = BRESENHAM_UPDATE_X_Y;
                }
                return center_pos + ivec2(-y, -x);
            case BRESENHAM_EMIT_PX_PY:
                state = BRESENHAM_EMIT_MX_MY;
                return center_pos + ivec2(+x, +y);
            case BRESENHAM_EMIT_MX_MY:
                state = BRESENHAM_UPDATE_X_Y;
                return center_pos + ivec2(-x, -y);
        }
    }
    return ivec2(-1, -1);
}

int run_fast(int radius)
{
    int val;
    int boundary_max = 0x00;
    int boundary_min = 0xFF;
    ivec2 pos;

    bresenham_circle_init(radius);
    pos = bresenham_circle_next_pt();

    while (pos.x >= 0 && pos.x < image_size.x && pos.y >= 0 && pos.y < image_size.y) {
        val = int(imageLoad(image_in, pos).r);
        if (val > boundary_max) { boundary_max = val; }
        if (val < boundary_min) { boundary_min = val; }
        pos = bresenham_circle_next_pt();
    }
    if (!((pos.x == -1) && (pos.y == -1)))
      return FIMD_RESULT_NONE;

    if ((center_val - boundary_max) >= int(config_threshold_diff)) {
        return FIMD_RESULT_MARKER;
    } else if (center_val >= int(config_threshold_sun) && (center_val - boundary_min) <= int(config_threshold_diff)) {
        return FIMD_RESULT_SUN;
    } else {
        return FIMD_RESULT_NONE;
    }
}

void main()
{
    config_max_markers_count = configuration[3];
    config_max_sun_pts_count = configuration[4];

    if (atomicCounter(markers_count) >= uint(config_max_markers_count) || atomicCounter(sun_pts_count) >= uint(config_max_sun_pts_count)) { return; }

    config_threshold = configuration[0];
    config_threshold_diff = configuration[1];
    config_threshold_sun = configuration[2];
    config_radii_count = configuration[5];

    image_size = imageSize(image_in);
    center_pos = ivec2(gl_GlobalInvocationID.xy);

    //center_val = int((imageLoad(image_in, center_pos).r) & (imageLoad(mask, center_pos).r));
    center_val = int((imageLoad(image_in, center_pos).r));
    
    uint index;
    int i, radius;
    bool detected = false;
    if (center_val >= int(config_threshold)) {
        for (i = 0; i < int(config_radii_count); i++) {
            radius = int(configuration[6 + i]);
            if (atomicCounter(markers_count) >= uint(config_max_markers_count) || atomicCounter(sun_pts_count) >= uint(config_max_sun_pts_count)) { return; }
            switch (run_fast(radius)) {
                case FIMD_RESULT_MARKER:
                    index = atomicCounterIncrement(markers_count);
                    if (index >= uint(config_max_markers_count)) { return; }
                    markers[index] = ((uint(center_pos.x) & uint(0x0000FFFF)) << 16) | (uint(center_pos.y) & uint(0x0000FFFF));
                    detected = true;
                    break;
                case FIMD_RESULT_SUN:
                    index = atomicCounterIncrement(sun_pts_count);
                    if (index >= uint(config_max_sun_pts_count)) { return; }
                    sun_pts[index] = ((uint(center_pos.x) & uint(0x0000FFFF)) << 16) | (uint(center_pos.y) & uint(0x0000FFFF));
                    detected = true;
                    break;
                case FIMD_RESULT_NONE:
                    break;
            }
            if (detected) { break; }
        }
    }
}
